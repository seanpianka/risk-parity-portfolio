[package]
name = "risk-parity-portfolio"
version = "0.1.0"
edition = "2021"

[dependencies]
yahoo_finance_api = "3.0.0"
tokio = { version = "1", features = ["rt", "rt-multi-thread", "macros"] }
tokio-test = "0.4"
time = "0.3.37"
finalytics = "0.7.0"
nalgebra = "0.33"
serde = "1.0"
serde_yaml = "0.9"
reqwest = { version = "0.12.12", features = ["blocking", "json"] }
csv = "1.2"
chrono = "0.4"
tracing = { version = "0.1", features = ["log"] }
tracing-subscriber = { version = "0.3", features = ["env-filter", "parking_lot"] }
serde_repr = "0.1.20"
[workspace.lints.rust]
trivial_casts = "allow"
trivial_numeric_casts = "deny"
unused_import_braces = "deny"
unused_results = "deny"
unused_must_use = "deny"

[workspace.lints.clippy]
# Clippy's style nits are useful, but not worth keeping in CI.
style = { level = "allow", priority = -1 }
# But continue to warn on anything in the "disallowed_" namespace.
disallowed_macros = "warn"
disallowed_methods = "warn"
disallowed_names = "warn"
disallowed_script_idents = "warn"
disallowed_types = "warn"
# Warn on some more style lints that are relatively stable and make sense.
iter_cloned_collect = "warn"
iter_next_slice = "warn"
iter_nth = "warn"
iter_nth_zero = "warn"
iter_skip_next = "warn"
len_zero = "warn"
redundant_field_names = "warn"
# `declare_interior_mutable_const` is classified as a style lint, but it can
# identify real bugs (e.g., declarying a `const Atomic` and using it like
# a `static Atomic`). However, it is also subject to false positives (e.g.,
# idiomatically declaring a static array of atomics uses `const Atomic`). We
# warn on this to catch the former, and expect any uses of the latter to allow
# this locally.
#
# Note: any const value with a type containing a `bytes::Bytes` hits this lint,
# and you should `#![allow]` it for now. This is most likely to be seen with
# `http::header::{HeaderName, HeaderValue}`. This is a Clippy bug which will be
# fixed in the Rust 1.80 toolchain (rust-lang/rust-clippy#12691).
declare_interior_mutable_const = "warn"
# Also warn on casts, preferring explicit conversions instead.
#
# We'd like to warn on lossy casts in the future, but lossless casts are the
# easiest ones to convert over.
cast_lossless = "warn"
bool_comparison = "deny"
clone_on_copy = "deny"
redundant_clone = "deny"
upper_case_acronyms = "allow"
unwrap_used = "allow"
expect_used = "allow"

